RESOURCE_DEFINITION
{
	name = Snacks
}
@RESOURCE_DEFINITION[Snacks]:FOR[SnacksResourceDef]
{
	density = 0.001
	unitCost = .5
	flowMode = ALL_VESSEL
	transfer = PUMP
	isTweakable = true
	volume = 1
}

RESOURCE_DEFINITION
{
	name = Soil
	density = 0.001
	unitCost = .5
	flowMode = ALL_VESSEL
	transfer = PUMP
	isTweakable = true
	volume = 1
}

//When a part with crew capacity is loaded in the editor and it lacks this resource, 
//or when a vessel is loaded into the scene and its parts with crew capacity lack this resource, 
//add it to the part. Doesn’t apply to kerbals going on EVA. Use SNACKS_EVA_RESOURCE for that.
SNACKS_PART_RESOURCE
{
	name = Snacks

	resourceName = Snacks

	// How many units per day that will be consumed. Overrides amount and maxAmount.
//	unitsPerDay = 3

	// Specifies how many days of life support to provide.
//	daysLifeSupport = 2

	// Overriden by unitsPerDay and daysLifeSupport if they're > 0
	amount = 200
	maxAmount = 200

	//Parts with at least one of the modules on this list affect the part's capacity to store the resource (their equipment takes up additional space, for instance).
	capacityAffectingModules = ModuleCommand 

	//If a part has at least one part module on the capacityAffectingModules list then multiply resource amount and max amount by this multiplier.
	capacityMultiplier = 0.25

	//If true (which is the default), then unitsPerDay and daysLifeSupport added are multiplied by the part's crew capacity.
	isPerKerbal = true
}

//This is how you define a resource processor that can consume inputs and produce outputs. The inputs and outputs are applied per kerbal.
//The resources can be part of a vessel or a characteristic of a kerbal, such as Courage, Stupidity, and Stress. If a vessel/kerbal runs out of a consumed resource
//then outcomes defined by the OUTCOME node are applied if told to do so. Similarly, if the vessel/kerbal has no more space to store a produced resource
//then outcomes are applied if told to do so.
SNACKS_RESOURCE_PROCESSOR
{
	name = Snacks!

	//IMPORTANT NOTE!
	//These settings are completely overriden by the Settings menu in game. They are provided here for reference only.
	//This ONLY applies to the Snacks resource.
	secondsPerCycle = 7200

	CONSUMED_RESOURCE
	{
		//Name of the resource
		resourceName = Snacks

		//Amount to consume per kerbal per cycle.
		amount = 1

		//If true, then resource will be displayed in the snapshots window.
		showInSnapshot = true

		//if true then outcomes are applied when vessel/kerbal runs out of the resource.
		failureResultAppliesOutcomes = true
	}

	PRODUCED_RESOURCE
	{
		//Name of the resource
		resourceName = Soil

		//Amount to produce per kerbal per cycle.
		amount = 1

		//If true, then resource will be displayed in the snapshots window.
		showInSnapshot = false

		//if true then outcomes are applied when vessel/kerbal runs out of space for the resource.
		failureResultAppliesOutcomes = false
	}

	//Outcomes represent what to do when the vessel/kerbal runs out of a resource and failures apply or the vessel/kerbal runs out of room for the resource and failures apply.
	//When a consumption and/or production process fails, Snacks records the failure. Outcomes like the FaintPenalty below can check to see how many cycles have failed before
	//applying the outcome.
	OUTCOME
	{
		//Name of the outcome. In this case it's the FaintPenalty. For this to be applied, fainting must be enabled in game settings.
		name = FaintPenalty

		//If true, then the outcome will be chosen at random and applied if random penalties are enabled. Otherwise it will always be applied.
		//Default is false.
		canBeRandom = true

		//Message to show to the player. You can omit this for a silent outcome.
		playerMessage = #LOC_INFO_FAINTE

		//The following fields depend upon the name of the outcome.

		//The name of the resource to check for failed process cycles.
		resourceName = Snacks

		//Number of cycles before fainting occurs.
		cyclesBeforeFainting = 3

		//How many seconds to faint for.
		faintDurationSeconds = 180
	}

	OUTCOME
	{
		name = DeathPenalty
		playerMessage = #LOC_INFO_DEATH
		resourceName = Snacks
		cyclesBeforeDeath = 10
	}
}

//When a kerbal goes on EVA, take this resource along and remove a corresponding amount from the vessel.
//NOTE: Snacks is a special case since we have game settings that affect snacks per meal and meals per day.
//So for these values, the SNACKS_EVA_RESOURCE config will reflect the game settings. This config node is provided as an example.
SNACKS_EVA_RESOURCE
{
	resourceName = Snacks
	amount = 1.0
	maxAmount = 1.0
	// When the resource amount drops to or below this value, display the warning message.
	warningAmount = 0.99
	// Message to display when the kerbal's resource has dropped to or below the warningAmount.
	warningMessage = Warning: The supply of Snacks has dropped below minimum safetly levels.
}

// These events are checked after all processors are done.
SNACKS_EVENT
{
	name = 8badf00d

	//You can set met-tags in the player message. This message appears if all the preconditions are met.
	//<<KerbalName>> Specifies name of the kerbal experiencing the outcomes.
	playerMessage = <<KerbalName>> ate some bad snacks and has a tummy ache!

	//Event cards exist in a separate bucket from global events. Only one event card is played per cycle.
	eventCategory = categoryEventCard

	//allAssigned, oneAvailable, allAvailable
	kerbalsAffected = affectsRandomAssigned

	//Optional timer. The specified number of seconds must pass before checking any preconditions.
	//secondsBetweenChecks = 21600

	//Optional timer, based on homeworld seconds per day, overrides above. Ignored for event cards; they're chosen once per day.
	//daysBetweenChecks = 1

	//Preconditions look for various conditions to be met. All preconditions must be met before applying outcomes.
	//For the complete list of preconditions, be sure to read the Snacks wiki.
	PRECONDITION
	{
		name = CheckProcessorResult
		type = resultConsumptionSuccess
		processorName = Snacks!
		cyclesRequired = 1
		resourceName = Snacks
	}
	
	PRECONDITION
	{
		name = CheckRandomChance
		dieRollMin = 1
		dieRollMax = 1000
		targetNumber = 999
	}
	
	//Outcomes are the consequences of meeting all of the preconditions. Consult the wikifor the complete list.
	//You can apply pentalties, but they'll honor game settings; if you don't allow fainting, then the penalty won't be applied.
	OUTCOME 
	{
		name = FaintPenalty
		duration = 180
	}

	OUTCOME:NEEDS[SnacksStress]
	{
		name  = ProduceResource
		resourceName = Stress
		amount = 1
	}
}

SNACKS_EVENT
{
	name = hangry
	playerMessage = <<KerbalName>> got the munchies and ate some Snacks!

	//If random events is disabled then event cards won't be played.
	eventCategory = categoryEventCard

	kerbalsAffected = affectsRandomAssigned

	PRECONDITION
	{
		name = CheckRandomChance
		dieRollMin = 1
		dieRollMax = 1000
		targetNumber = 999
	}

	OUTCOME 
	{
		name = ResourceConsumed
		resourceName = Snacks
		amount = 3
	}

	OUTCOME:NEEDS[SnacksStress]
	{
		name  = ConsumeResource
		resourceName = Stress
		amount = 0.5
	}
}
