RESOURCE_DEFINITION
{
	name = Snacks
	density = 0.001
	unitCost = .5
	flowMode = ALL_VESSEL
	transfer = PUMP
	isTweakable = true
	volume = 1
}

RESOURCE_DEFINITION
{
	name = Soil
	density = 0.001
	unitCost = .5
	flowMode = ALL_VESSEL
	transfer = PUMP
	isTweakable = true
	volume = 1
}

//When a part with crew capacity is loaded in the editor and it lacks this resource, 
//or when a vessel is loaded into the scene and its parts with crew capacity lack this resource, 
//add it to the part. Doesn’t apply to kerbals going on EVA. Use SNACKS_EVA_RESOURCE for that.
SNACKS_PART_RESOURCE
{
	resourceName = Snacks
	amount = 200
	maxAmount = 200

	//Parts with at least one of the modules on this list affect the part's capacity to store the resource (their equipment takes up additional space, for instance).
	capacityAffectingModules = ModuleCommand 

	//If a part has at least one part module on the capacityAffectingModules list then multiply resource amount and max amount by this multiplier.
	capacityMultiplier = 0.25

	//If true (which is the default), then amount and maxAmount added are multiplied by the part's crew capacity.
	isPerKerbal = true
}

//When a kerbal goes on EVA, take this resource along and remove a corresponding amount from the vessel.
//NOTE: Snacks is a special case since we have game settings that affect snacks per meal and meals per day.
//So for these values, the SNACKS_EVA_RESOURCE config will reflect the game settings. This config node is provided as an example.
SNACKS_EVA_RESOURCE
{
	resourceName = Snacks
	amount = 1.0
	maxAmount = 1.0
}

// These events are checked after all processors are done.
SNACKS_EVENT
{
	name = 8badf00d

	//You can set met-tags in the player message. This message appears if all the preconditions are met.
	//<<KerbalName>> Specifies name of the kerbal experiencing the outcomes.
	playerMessage = <<KerbalName>> ate some bad snacks and has a tummy ache!

	//Event cards exist in a separate bucket from global events. Only one event card is played per cycle.
	category = categoryEventCard

	//allAssigned, oneAvailable, allAvailable
	affectedKerbals = affectsRandomAssigned

	//Optional timer. The specified number of seconds must pass before checking any preconditions.
	//secondsBetweenChecks = 21600

	//Optional timer, based on homeworld seconds per day, overrides above. Ignored for event cards; they're chosen once per day.
	//daysBetweenChecks = 1

	//Preconditions look for various conditions to be met. All preconditions must be met before applying outcomes.
	//For the complete list of preconditions, be sure to read the Snacks wiki.
	PRECONDITION
	{
		name = CheckProcessorResult
		type = resultConsumptionSuccess
		processorName = Snacks!
		cyclesRequired = 1
		resourceName = Snacks
	}
	
	PRECONDITION
	{
		name = CheckRandomChance
		dieRollMin = 1
		dieRollMax = 1000
		targetNumber = 999
	}
	
	//Outcomes are the consequences of meeting all of the preconditions. Consult the wikifor the complete list.
	//You can apply pentalties, but they'll honor game settings; if you don't allow fainting, then the penalty won't be applied.
	OUTCOME 
	{
		name = FaintPenalty
		duration = 180
	}

	OUTCOME:NEEDS[SnacksStress]
	{
		name  = ProduceResource
		resourceName = Stress
		amount = 1
	}
}

SNACKS_EVENT
{
	name = hangry
	playerMessage = <<KerbalName>> got the munchies and ate some Snacks!

	//If random events is disabled then event cards won't be played.
	category = categoryEventCard

	affectedKerbals = affectsRandomAssigned

	PRECONDITION
	{
		name = CheckRandomChance
		dieRollMin = 1
		dieRollMax = 1000
		targetNumber = 999
	}

	OUTCOME 
	{
		name = ResourceConsumed
		resourceName = Snacks
		amount = 3
	}

	OUTCOME:NEEDS[SnacksStress]
	{
		name  = ConsumeResource
		resourceName = Stress
		amount = 0.5
	}
}
